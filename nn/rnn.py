import numpy as np
from mytorch import tensor
from mytorch.tensor import Tensor,cat
from mytorch.nn.module import Module
from mytorch.nn.activations import Tanh, ReLU, Sigmoid
from mytorch.nn.util import PackedSequence, pack_sequence, unpack_sequence


class RNNUnit(Module):
    '''
    This class defines a single RNN Unit block.

    Args:
        input_size (int): # features in each timestep
        hidden_size (int): # features generated by the RNNUnit at each timestep
        nonlinearity (string): Non-linearity to be applied the result of matrix operations 
    '''

    def __init__(self, input_size, hidden_size, nonlinearity = 'tanh' ):
        
        super(RNNUnit,self).__init__()
        
        # Initializing parameters
        self.weight_ih = Tensor(np.random.randn(hidden_size,input_size), requires_grad=True, is_parameter=True)
        self.bias_ih   = Tensor(np.zeros(hidden_size), requires_grad=True, is_parameter=True)
        self.weight_hh = Tensor(np.random.randn(hidden_size,hidden_size), requires_grad=True, is_parameter=True)
        self.bias_hh   = Tensor(np.zeros(hidden_size), requires_grad=True, is_parameter=True)

        self.hidden_size = hidden_size
        
        # Setting the Activation Unit
        if nonlinearity == 'tanh':
            self.act = Tanh()
        elif nonlinearity == 'relu':
            self.act = ReLU()

    def __call__(self, input, hidden = None):
        return self.forward(input,hidden)

    def forward(self, input, hidden = None):
        '''
        Args:
            input (Tensor): (effective_batch_size,input_size)
            hidden (Tensor,None): (effective_batch_size,hidden_size)
        Return:
            Tensor: (effective_batch_size,hidden_size)
        '''
        
        # TODO: INSTRUCTIONS
        # Perform matrix operations to construct the intermediary value from input and hidden tensors
        # Apply the activation on the resultant
        # Remeber to handle the case when hidden = None. Construct a tensor of appropriate size, filled with 0s to use as the hidden.
        if hidden is None:
            shape = (input.shape[0],self.hidden_size)
            hidden = tensor.Tensor.zeros(*shape) 

        hidden = input @ self.weight_ih.T() + self.bias_ih + hidden @ self.weight_hh.T() + self.bias_hh

        return self.act(hidden)
        #raise NotImplementedError('Implement Forward')


class TimeIterator(Module):
    '''
    For a given input this class iterates through time by processing the entire
    seqeunce of timesteps. Can be thought to represent a single layer for a 
    given basic unit which is applied at each time step.
    
    Args:
        basic_unit (Class): RNNUnit or GRUUnit. This class is used to instantiate the unit that will be used to process the inputs
        input_size (int): # features in each timestep
        hidden_size (int): # features generated by the RNNUnit at each timestep
        nonlinearity (string): Non-linearity to be applied the result of matrix operations 

    '''

    def __init__(self, basic_unit, input_size, hidden_size, nonlinearity = 'tanh' ):
        super(TimeIterator,self).__init__()

        # basic_unit can either be RNNUnit or GRUUnit
        self.unit = basic_unit(input_size,hidden_size,nonlinearity)    

    def __call__(self, input, hidden = None):
        return self.forward(input,hidden)
    
    def forward(self,input,hidden = None):
        
        '''
        NOTE: Please get a good grasp on util.PackedSequence before attempting this.

        Args:
            input (PackedSequence): input.data is tensor of shape ( total number of timesteps (sum) across all samples in the batch, input_size)
            hidden (Tensor, None): (batch_size, hidden_size)
        Returns:
            PackedSequence: ( total number of timesteps (sum) across all samples in the batch, hidden_size)
            Tensor (batch_size,hidden_size): This is the hidden generated by the last time step for each sample joined together. Samples are ordered in descending order based on number of timesteps. This is a slight deviation from PyTorch.
        '''
        
        # Resolve the PackedSequence into its components
        data, sorted_indices, batch_sizes = input
        
        # TODO: INSTRUCTIONS
        # Iterate over appropriate segments of the "data" tensor to pass same timesteps across all samples in the batch simultaneously to the unit for processing.
        # Remeber to account for scenarios when effective_batch_size changes between one iteration to the next
        index = 0
        hidden_list = []
        #print("*"*20)
        #print("batch_sizes:", batch_sizes)
        #print("data.shape: ",data.shape)
        #print("data : {}".format(data))
        index = 0
   
        for item in batch_sizes:
            mini_batch = data[index:index+item]
            index +=item
            if hidden is not None:
                if mini_batch.shape[0] != hidden.shape[0]:
                    hidden = hidden[:mini_batch.shape[0]]
                    #print("Hidden changed shape to : {}".format(hidden.shape))
            
            #print("chunk.shape: {}".format(chunk.shape)) 
            #print("mini_batch: {}".format(mini_batch))
            hidden = self.unit(mini_batch,hidden)
            #print("-"*20)
            #print("hidden.shape:{}".format(hidden.shape))
            hidden_list.append(hidden)
        data = cat(hidden_list, dim=0)
        out = PackedSequence(data,sorted_indices,batch_sizes)
        # 2) grab the last element of the test. 
        seq = unpack_sequence(out)
        o = []
        for item in sorted_indices:
            o.append(seq[item][-1].unsqueeze(0))
            #print("item : {}, seq[item][-1,:]: {}".format(item, seq[item][-1,:]))
        
        o = cat(list(o),dim=0)
        return out,o
        #raise NotImplementedError('Implement Forward')


class RNN(TimeIterator):
    '''
    Child class for TimeIterator which a propriately initializes the parent class to construct an RNN.
    Args:
        input_size (int): # features in each timestep
        hidden_size (int): # features generated by the RNNUnit at each timestep
        nonlinearity (string): Non-linearity to be applied the result of matrix operations 
    '''

    def __init__(self, input_size, hidden_size, nonlinearity = 'tanh' ):
        # TODO: Properly Initialize the RNN class
        super(RNN,self).__init__(RNNUnit,input_size,hidden_size,nonlinearity)
   
